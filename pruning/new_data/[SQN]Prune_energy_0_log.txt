
==> Dump Arguments:
pruning method: energy
visible gpus: 2
sensitivity analysis: OFF
overall pruning ratio: 0.2
stage: 0

0
0

==> Setting params:
batch_size : 128
test_batch_size : 128
epochs : 150
lr_epochs : 50
lr : 0.0001
momentum : 0.9
weight_decay : 0.0001
no_cuda : False
seed : 1
log_interval : 100
arch : SqueezeNet
pretrained : saved_models/SqueezeNet.origin.pth.tar
evaluate : False
retrain : False
prune : energy
prune_shape : vector
prune_target : None
stage : 0
debug : -1
candidates_pruning_ratios : [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
gpus : [0]
visible_gpus : 2
learning_rate_list : [0.001, 0.0005]
sa : True
sen_ana : False
overall_pruning_ratio : 0.2
cuda : False
====================

Files already downloaded and verified
SqueezeNet(
  (conv1): Conv2d(3, 64, kernel_size=(3, 3), stride=(2, 2))
  (relu_conv1): ReLU(inplace=True)
  (pool1): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=False)
  (fire1): Fire(
    (squeeze): Conv2d(64, 16, kernel_size=(1, 1), stride=(1, 1))
    (relu_squeeze): ReLU(inplace=True)
    (expand1x1): Conv2d(16, 64, kernel_size=(1, 1), stride=(1, 1))
    (relu_expand1x1): ReLU(inplace=True)
    (expand3x3): Conv2d(16, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (relu_expand3x3): ReLU(inplace=True)
  )
  (fire2): Fire(
    (squeeze): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1))
    (relu_squeeze): ReLU(inplace=True)
    (expand1x1): Conv2d(16, 64, kernel_size=(1, 1), stride=(1, 1))
    (relu_expand1x1): ReLU(inplace=True)
    (expand3x3): Conv2d(16, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (relu_expand3x3): ReLU(inplace=True)
  )
  (fire3): Fire(
    (squeeze): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1))
    (relu_squeeze): ReLU(inplace=True)
    (expand1x1): Conv2d(32, 128, kernel_size=(1, 1), stride=(1, 1))
    (relu_expand1x1): ReLU(inplace=True)
    (expand3x3): Conv2d(32, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (relu_expand3x3): ReLU(inplace=True)
  )
  (dropout): Dropout(p=0.5, inplace=False)
  (conv2): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
  (relu_conv2): ReLU(inplace=True)
  (pool2): AdaptiveAvgPool2d(output_size=(1, 1))
  (softmax): Softmax(dim=1)
)
